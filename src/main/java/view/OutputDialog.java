package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import tools.ExcelWriter;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class OutputDialog extends JDialog {
    private JPanel contentPane;
    private JButton button2;
    private JButton buttonCancel;
    private JButton Button1;
    private String path = null;

    public OutputDialog() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(button2);

        button2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                path = null;
                findPath("./");
                if (path != null && !path.equals("")) {
                    System.out.println(path);
                    try {
                        ExcelWriter.writerAll(path);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    dispose();
                }
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        Button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                path = null;
                findPath("./");
                if (path != null && !path.equals("")) {
                    System.out.println(path);
                    try {
                        ExcelWriter.writerTransData(path);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    dispose();
                }
            }
        });
    }

    private void findPath(String initPath) {
        try {
            //设置界面风格
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //设置文件选择窗口开始打开的路径，目前设置为项目所在目录
            JFileChooser chooser = new JFileChooser(new File(initPath));
            //把按钮文字改成保存
            chooser.setApproveButtonText("保存");


            //后缀名过滤器
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Excel表格文件(*.xlsx)", "xlsx"
            );
            chooser.setFileFilter(filter);

            //下面的方法将阻塞，直到用户按下保存按钮且文件名文本框不为空或者用户按下取消按钮
            int option = chooser.showOpenDialog(null);
            if (option == JFileChooser.APPROVE_OPTION) {//用户选择了保存
                File file = chooser.getSelectedFile();
                String fileName = chooser.getName(file); //从文件名输入框中获取文件名

                //如果用户填写的文件名不带后缀，则自动添加
                if (fileName.indexOf(".xls") == -1) {
                    file = new File(chooser.getCurrentDirectory(), fileName + ".xlsx");
                }


                //如果文件存在，则弹出错误提示框，并且在原来用户想保存的地方再次打开保存窗口
                if (file.exists()) {
                    System.out.println("文件已存在");
                    JOptionPane.showMessageDialog(null, "文件已存在，请重新命名", " 错误", JOptionPane.ERROR_MESSAGE);
                    findPath(file.getParent());
                    return;
                }

                path = file.getAbsoluteFile().toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        OutputDialog dialog = new OutputDialog();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        button2 = new JButton();
        button2.setText("导出全部数据");
        panel2.add(button2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Button1 = new JButton();
        Button1.setText("导出转换数据");
        panel2.add(Button1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("导出类型");
        panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
